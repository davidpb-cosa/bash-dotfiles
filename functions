#!/usr/bin/env bash
#
# Feel free to add new functions or edit the default ones as
# much as you want, but always watch the consequences. It
# is recommended to keep these functions without modifying it
# since some dotfiles may need them as they are in default
#
#
# @author losedavidpb
#

source ~/.config/shell/aliases

function porcmem () {
	local column=$(free -w | egrep "Mem:")
	local porc=$(( $(echo $column | awk '{print $3}') * 100 ))
	porc=$(( $porc / $(echo $column | awk '{print $2}') ))

	return $porc
}

# Show current RAM status in human-readable output
function raminfo () {
	local porc=$(porcmem; echo $?)

	local column=$(free -hw | grep "Mem:")
	local used=$(echo $column | awk '{print $3}')
	local total=$(echo $column | awk '{print $2}')

	echo "${used} / ${total} (${porc}%)"
}

# Show some information about a target specified in param $1
# # usage: mountinfo /home
function mountinfo () {
	if [[ -z $1 ]]; then
		echo "error: mountinfo: target not specified" 1>&2
		echo "use: mountinfo: mountinfo <TARGET>" 1>&2
		return 1
	else
		tempfile=$(mktemp)

		# Find and store in a file what are the candidates
		df -h --output=used,size,pcent,fstype,target | grep "$1" > $tempfile

		# Check if target exists in current file system
		while IFS= read -r line; do
				if [[ $(echo $line | awk '{print $5}') = $1 ]]; then
					echo $line | awk '{print $1 " | " $2 " (" $3 ")" " (" $4 ")"}'
					return 0
				fi
		done < $tempfile

		echo "error: mountinfo: unkown target" 1>&2
		echo "use: mountinfo: mountinfo <TARGET>" 1>&2
		return 1
	fi
}

# Create several sh files at current path
# # usage: mksh <SH_FILE1> <SH_FILE2> ...
function mksh () {
	if (( $# >= 1 )); then
		while (( $# != 0 )); do
			if [[ $1 =~ .+\.sh ]]; then
				touch $1
				chmod +x $1
			else
				echo "error: mksh: file needs to be a .sh file" 1>&2
				echo "use: mksh: mksh <SH_FILE1> <SH_FILE2> ..." 1>&2
			fi

			shift
		done
	else
		echo "error: mksh: invalid number of arguments" 1>&2
		echo "use: mksh: mksh <SH_FILE1> <SH_FILE2> ..." 1>&2
		return 1
	fi

}

# Create a new directory and enter it
# # usage: mkd <directory_path>
function mkd () {
	mkdir -p "$@" && cd "$_"
}

# Remove all files inside a folder
# # usage: rmmkdir <folder_path>
function rmmkdir () {
	if [[ -f $1 ]]; then
		rm -R $1 &>/dev/null
		mkdir -R $1 &>/dev/null

		return 0
	fi

	return -1
}

# Determine size of a file or total size of a directory
# # usage: fs <directory/file>
function fs () {
	if [[ -n "$@" ]]; then
		du -sh -- "$@"
	else
		du -sh ./*
	fi
}

# # ex - archive extractor
# Extracts current file according its format
# # usage: ex <file>
function ex () {
  if [[ -f $1 ]] ; then
  	case $1 in
      *.tar.bz2)   tar xjf $1   ;;
      *.tar.gz)    tar xzf $1   ;;
	  *.tar.xz)		 tar xf $1	;;
      *.bz2)       bunzip2 $1   ;;
      *.rar)       unrar x $1   ;;
      *.gz)        gunzip $1    ;;
      *.tar)       tar xf $1    ;;
      *.tbz2)      tar xjf $1   ;;
      *.tgz)       tar xzf $1   ;;
      *.zip)       unzip $1     ;;
      *.Z)         uncompress $1;;
      *.7z)        7z x $1      ;;
      *)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}
